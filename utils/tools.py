import os
import json
from huggingface_hub import ModelCard, ModelCardData, RepoCard

def get_id_and_version_and_prev_results(evaluation_results_filepath, args):
    """
    Get the model ID, version counter, and previous results.

    Args:
        evaluation_results_filepath (str): The filepath to the evaluation results file.
        args (object): The arguments object containing various parameters.

    Returns:
        tuple: A tuple containing the model ID, version counter, and previous results.
    """

    if os.path.isfile(evaluation_results_filepath):
        with open(evaluation_results_filepath, 'r') as f:
            previous_results = json.load(f)
    else:
        previous_results = []

    version_counter = 1
        
    if args.no_extraction:
        model_id = f"{args.abstractive_model}_no_extraction_V{version_counter}"

        while any(entry["Model_ID"] == model_id for entry in previous_results):
            version_counter += 1
            model_id = f"{args.abstractive_model}_no_extraction_V{version_counter}"
            
        return model_id, version_counter, previous_results
    
    model_id = f"{args.extractive_model}_{args.abstractive_model}_{args.mode}"
    if args.mode == "Fixed" or args.mode == "Hybrid":
        model_id += f"_ratio_{args.compression_ratio}"

    model_id += f"_V{version_counter}"

    while any(entry["Model_ID"] == model_id for entry in previous_results):
        version_counter += 1
        model_id = f"{args.extractive_model}_{args.abstractive_model}_{args.mode}"
        if args.mode == "Fixed" or args.mode == "Hybrid":
            model_id += f"_ratio_{args.compression_ratio}"
        model_id += f"_V{version_counter}"

    return model_id, version_counter, previous_results


def calculate_hybrid_final_step_ratio(intermediate_summary, abstractive_model_token_length, extractive_tokenizer):
    """
    Calculates the final ratio between the token length of the abstractive model and the intermediate summary.
    BEWARE WHEN THE RATIO IS LARGER THAN 1, THE INTERMEDIATE SUMMARY IS LARGER THAN THE ABSTRACTIVE MODEL TOKEN LENGTH.

    Parameters:
    intermediate_summary (str): The intermediate summary generated by the abstractive model.
    abstractive_model_token_length (int): The token length of the abstractive model.
    extractive_tokenizer (object): The tokenizer used for the extractive model.

    Returns:
    float: The final ratio between the token length of the abstractive model and the intermediate summary.
    """

    token_length = extractive_tokenizer(intermediate_summary, return_tensors='pt')['input_ids'].shape[1]
    final_ratio = (abstractive_model_token_length / token_length)

    return final_ratio


def create_model_card(args, model_id):
    
    content = ''
    with open('docs/card_template.md', 'r') as f:
        content += f.read()

    content = content.replace('PAPER_TITLE', 'testeeee')

    card = ModelCard(content)

    return card

